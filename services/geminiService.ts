
import { GoogleGenAI, Type, Part, Content } from "@google/genai";
import { getSystemInstruction, getQuizGenerationSystemInstruction, getSummarizationSystemInstruction } from '../constants';
import type { QuizQuestion, Message, FileAttachment } from '../types';
import { Sender } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export interface TutorResponse {
    text: string;
    suggestions: string[];
    imagePrompt?: string;
}

const getBase64Data = (dataUrl: string): string => {
    const parts = dataUrl.split(',');
    if (parts.length === 2) {
        return parts[1];
    }
    // Return original string if it's not a valid data URL
    return dataUrl; 
};


export const getTutorResponse = async (
    history: Message[],
    grade: string, 
    subject: string, 
    completedLessons?: string,
    isResuming?: boolean
): Promise<TutorResponse> => {
    try {
        const finalContents: Content[] = history.map((msg): Content => {
            const parts: Part[] = [];

            if (msg.file) {
                 parts.push({
                    inlineData: {
                        mimeType: msg.file.mimeType,
                        data: getBase64Data(msg.file.data),
                    }
                });
            }
            
            // Add text part if it exists.
            if(msg.text) {
                parts.push({ text: msg.text });
            }

            // The user role must have at least one part.
            if (msg.sender === Sender.User && parts.length === 0) {
                parts.push({ text: "Please analyze the attached file." });
            }

            return {
                role: msg.sender === Sender.User ? 'user' : 'model',
                parts: parts,
            };
        });

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: finalContents,
            config: {
                systemInstruction: getSystemInstruction(grade, subject, completedLessons, isResuming),
                temperature: 0.7,
                responseMimeType: 'application/json',
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        response: { type: Type.STRING },
                        suggestions: {
                            type: Type.ARRAY,
                            items: { type: Type.STRING }
                        },
                        imagePrompt: { type: Type.STRING }
                    },
                    required: ["response", "suggestions"]
                }
            },
        });

        const jsonText = response.text.trim();
        const parsedResponse = JSON.parse(jsonText);

        if (parsedResponse && typeof parsedResponse.response === 'string' && Array.isArray(parsedResponse.suggestions)) {
            return {
                text: parsedResponse.response,
                suggestions: parsedResponse.suggestions,
                imagePrompt: parsedResponse.imagePrompt,
            };
        } else {
             throw new Error("Invalid JSON response structure from AI.");
        }

    } catch (error) {
        console.error("Error processing Gemini API response:", error);
        return {
            text: `R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra. Em vui l√≤ng th·ª≠ l·∫°i sau nh√©.`,
            suggestions: ["Th·ª≠ h·ªèi l·∫°i c√¢u v·ª´a r·ªìi", "B·∫Øt ƒë·∫ßu l·∫°i bu·ªïi h·ªçc"]
        };
    }
};

export const summarizeChatSession = async (
    messages: Message[],
    grade: string,
    subject: string
): Promise<string> => {
    try {
        const conversation = messages.map(m => `${m.sender === 'user' ? 'H·ªçc sinh' : 'C√¥ gi√°o'}: ${m.text}`).join('\n');
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: conversation,
            config: {
                systemInstruction: getSummarizationSystemInstruction(grade, subject),
                temperature: 0.2,
            },
        });

        return response.text.trim();
    } catch (error) {
        console.error("Error summarizing chat session:", error);
        return ""; 
    }
};

export const getQuizQuestions = async (
    grade: string,
    subject: string,
    topic: string,
    count: number = 5
): Promise<QuizQuestion[]> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `T·∫°o ${count} c√¢u h·ªèi tr·∫Øc nghi·ªám.`,
            config: {
                systemInstruction: getQuizGenerationSystemInstruction(grade, subject, topic),
                responseMimeType: 'application/json',
                responseSchema: {
                    type: Type.ARRAY,
                    items: {
                        type: Type.OBJECT,
                        properties: {
                            question: { type: Type.STRING },
                            options: {
                                type: Type.ARRAY,
                                items: { type: Type.STRING }
                            },
                            correctAnswer: { type: Type.STRING },
                            explanation: { type: Type.STRING }
                        },
                        required: ["question", "options", "correctAnswer", "explanation"]
                    }
                }
            }
        });
        
        const jsonText = response.text.trim();
        const questions = JSON.parse(jsonText);

        // Validate the structure
        if (!Array.isArray(questions) || questions.some(q => !q.question || !q.options || !q.correctAnswer || !q.explanation)) {
             throw new Error("ƒê·ªãnh d·∫°ng d·ªØ li·ªáu c√¢u h·ªèi kh√¥ng h·ª£p l·ªá.");
        }
        
        return questions;

    } catch (error) {
        console.error("Error generating quiz questions:", error);
        if (error instanceof Error) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi: ${error.message}`);
        }
        throw new Error("ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám.");
    }
}


export const getWrittenAnswerFeedback = async (
    file: FileAttachment,
    question: QuizQuestion
): Promise<string> => {
    try {
        const systemInstruction = `B·∫°n l√† m·ªôt c√¥ gi√°o AI th√¢n thi·ªán, ƒëang ch·∫•m b√†i cho h·ªçc sinh.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem x√©t h√¨nh ·∫£nh ho·∫∑c file PDF b√†i l√†m vi·∫øt tay c·ªßa h·ªçc sinh v√† ƒë∆∞a ra nh·∫≠n x√©t.

B·ªëi c·∫£nh:
- C√¢u h·ªèi tr·∫Øc nghi·ªám: "${question.question}"
- ƒê√°p √°n ƒë√∫ng: "${question.correctAnswer}"
- Gi·∫£i th√≠ch chi ti·∫øt: "${question.explanation}"

Y√™u c·∫ßu:
1. Ph√¢n t√≠ch k·ªπ l∆∞·ª°ng b√†i l√†m c·ªßa h·ªçc sinh trong file ƒë√≠nh k√®m.
2. So s√°nh b√†i l√†m ƒë√≥ v·ªõi ƒë√°p √°n ƒë√∫ng v√† l·ªùi gi·∫£i th√≠ch ƒë√£ cho.
3. ƒê∆∞a ra nh·∫≠n x√©t mang t√≠nh x√¢y d·ª±ng, nh·∫π nh√†ng v√† kh√≠ch l·ªá. B·∫Øt ƒë·∫ßu b·∫±ng vi·ªác khen ng·ª£i n·ªó l·ª±c c·ªßa em ("C√¥ th·∫•y em ƒë√£ r·∫•t c·ªë g·∫Øng...").
4. Ch·ªâ ra nh·ªØng ƒëi·ªÉm h·ªçc sinh ƒë√£ l√†m ƒë√∫ng.
5. N·∫øu c√≥ l·ªói sai, h√£y ch·ªâ ra c·ª• th·ªÉ v√† gi·∫£i th√≠ch t·∫°i sao n√≥ sai, d·ª±a tr√™n l·ªùi gi·∫£i th√≠ch ƒë√£ cung c·∫•p. ƒê·ª´ng ch·ªâ n√≥i "sai r·ªìi", h√£y h∆∞·ªõng d·∫´n em c√°ch l√†m ƒë√∫ng.
6. Gi·ªçng vƒÉn: Th√¢n thi·ªán, g·∫ßn g≈©i, x∆∞ng "c√¥" v√† g·ªçi h·ªçc sinh l√† "em". S·ª≠ d·ª•ng emoji ph√π h·ª£p (v√≠ d·ª•: üëç, ü§î, üí°, üòä).
7. K·∫øt th√∫c b·∫±ng m·ªôt l·ªùi ƒë·ªông vi√™n.
8. Ch·ªâ tr·∫£ v·ªÅ ph·∫ßn vƒÉn b·∫£n nh·∫≠n x√©t, kh√¥ng th√™m b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o kh√°c.`;

        const filePart: Part = {
            inlineData: {
                mimeType: file.mimeType,
                data: getBase64Data(file.data),
            }
        };
        
        const textPart: Part = {
            text: "ƒê√¢y l√† b√†i l√†m c·ªßa em, c√¥ xem gi√∫p em v·ªõi ·∫°."
        };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: [{ role: 'user', parts: [filePart, textPart] }],
            config: {
                systemInstruction: systemInstruction,
                temperature: 0.5,
            },
        });

        return response.text.trim();

    } catch (error) {
        console.error("Error getting written answer feedback:", error);
        return "R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi c√¥ ph√¢n t√≠ch b√†i l√†m c·ªßa em. Em th·ª≠ l·∫°i sau nh√©.";
    }
};

export const translateToEnglish = async (text: string): Promise<string> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `Translate the following Vietnamese text to English, and only return the translated text without any preamble: "${text}"`,
        });
        return response.text;
    } catch (error) {
        console.error("Error translating text with Gemini API:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to translate: ${error.message}`);
        }
        throw new Error("An unknown error occurred during translation.");
    }
};

export const generateAvatarImage = async (prompt: string): Promise<string> => {
    try {
        const fullPrompt = `An avatar for a friendly female AI tutor for Vietnamese students. Style: cute, simple, cartoon, vector art. Subject: ${prompt}.`;
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/png',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("The API did not return any images.");
        }
    } catch (error) {
        console.error("Error generating avatar image:", error);
        if (error instanceof Error) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o avatar: ${error.message}`);
        }
        throw new Error("ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o avatar.");
    }
};

export const generateIllustration = async (prompt: string): Promise<string> => {
    try {
        const englishPrompt = await translateToEnglish(prompt);
        const fullPrompt = `Educational illustration for a student. Style: clear, simple, colorful, diagrammatic. Subject: ${englishPrompt}. IMPORTANT: Any text or labels in the image must be written bilingually in both English and Vietnamese. For example: "Sun (M·∫∑t tr·ªùi)". Original Vietnamese context: "${prompt}".`;
        
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/png',
                aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ h√¨nh ·∫£nh n√†o.");
        }
    } catch (error) {
        console.error("L·ªói khi t·∫°o h√¨nh minh h·ªça:", error);
        if (error instanceof Error) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh: ${error.message}`);
        }
        throw new Error("ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o h√¨nh ·∫£nh minh h·ªça.");
    }
};
